'use strict';class SCRouter extends window.HTMLElement{_onChanged(){const a=window.location.pathname,b=Array.from(this._routes.keys()),c=b.find((b)=>b.test(a)),d=c.exec(a);if(!c)return;if(this._newView=this._routes.get(c),this._isTransitioningBetweenViews)return Promise.resolve();this._isTransitioningBetweenViews=!0;let e=Promise.resolve();if(this._currentView){if(this._currentView===this._newView)return this._isTransitioningBetweenViews=!1,this._currentView.update(d);e=this._currentView.out(d)}const f=document.querySelector('sc-nav');return f.setAttribute('active',d.input),e.then(()=>{return this._currentView=this._newView,this._isTransitioningBetweenViews=!1,this._newView.in(d)})}go(a){return window.history.pushState({},'',a),this._onChanged()}addRoute(a,b){return this._routes.has(a)?console.warn(`Route already exists: ${a}`):void this._routes.set(a,b)}_addRoutes(){let a=document.querySelectorAll('sc-view');a.forEach((a)=>{a.route&&this.addRoute(new RegExp(a.route,'i'),a)},this)}_removeRoute(a){this._routes.delete(a)}_clearRoutes(){this._routes.clear()}createdCallback(){this._onChanged=this._onChanged.bind(this),this._routes=new Map}attachedCallback(){window.addEventListener('popstate',this._onChanged),this._clearRoutes(),this._addRoutes(),this._onChanged()}detachedCallback(){window.removeEventListener('popstate',this._onChanged)}}document.registerElement('sc-router',SCRouter);